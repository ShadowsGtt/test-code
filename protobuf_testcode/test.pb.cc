// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace WeChatPro {
class Login_HeadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Login_Head>
      _instance;
} _Login_Head_default_instance_;
class Reply_LoginDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Reply_Login>
      _instance;
} _Reply_Login_default_instance_;
}  // namespace WeChatPro
namespace protobuf_test_2eproto {
static void InitDefaultsLogin_Head() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::WeChatPro::_Login_Head_default_instance_;
    new (ptr) ::WeChatPro::Login_Head();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WeChatPro::Login_Head::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Login_Head =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLogin_Head}, {}};

static void InitDefaultsReply_Login() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::WeChatPro::_Reply_Login_default_instance_;
    new (ptr) ::WeChatPro::Reply_Login();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WeChatPro::Reply_Login::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Reply_Login =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReply_Login}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Login_Head.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Reply_Login.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WeChatPro::Login_Head, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WeChatPro::Login_Head, data_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WeChatPro::Login_Head, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WeChatPro::Login_Head, password_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WeChatPro::Reply_Login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WeChatPro::Reply_Login, data_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WeChatPro::Reply_Login, res_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::WeChatPro::Login_Head)},
  { 8, -1, sizeof(::WeChatPro::Reply_Login)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::WeChatPro::_Login_Head_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::WeChatPro::_Reply_Login_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "test.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ntest.proto\022\tWeChatPro\"C\n\nLogin_Head\022\021\n"
      "\tdata_size\030\001 \001(\017\022\020\n\010username\030\002 \001(\t\022\020\n\010pa"
      "ssword\030\003 \001(\t\"-\n\013Reply_Login\022\021\n\tdata_size"
      "\030\001 \001(\017\022\013\n\003res\030\002 \001(\010b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 147);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_test_2eproto
namespace WeChatPro {

// ===================================================================

void Login_Head::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Login_Head::kDataSizeFieldNumber;
const int Login_Head::kUsernameFieldNumber;
const int Login_Head::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Login_Head::Login_Head()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_test_2eproto::scc_info_Login_Head.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:WeChatPro.Login_Head)
}
Login_Head::Login_Head(const Login_Head& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  data_size_ = from.data_size_;
  // @@protoc_insertion_point(copy_constructor:WeChatPro.Login_Head)
}

void Login_Head::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_size_ = 0;
}

Login_Head::~Login_Head() {
  // @@protoc_insertion_point(destructor:WeChatPro.Login_Head)
  SharedDtor();
}

void Login_Head::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Login_Head::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Login_Head::descriptor() {
  ::protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Login_Head& Login_Head::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_test_2eproto::scc_info_Login_Head.base);
  return *internal_default_instance();
}


void Login_Head::Clear() {
// @@protoc_insertion_point(message_clear_start:WeChatPro.Login_Head)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_size_ = 0;
  _internal_metadata_.Clear();
}

bool Login_Head::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WeChatPro.Login_Head)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed32 data_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &data_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "WeChatPro.Login_Head.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "WeChatPro.Login_Head.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WeChatPro.Login_Head)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WeChatPro.Login_Head)
  return false;
#undef DO_
}

void Login_Head::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WeChatPro.Login_Head)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 data_size = 1;
  if (this->data_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->data_size(), output);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "WeChatPro.Login_Head.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // string password = 3;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "WeChatPro.Login_Head.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:WeChatPro.Login_Head)
}

::google::protobuf::uint8* Login_Head::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WeChatPro.Login_Head)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 data_size = 1;
  if (this->data_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->data_size(), target);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "WeChatPro.Login_Head.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // string password = 3;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "WeChatPro.Login_Head.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WeChatPro.Login_Head)
  return target;
}

size_t Login_Head::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WeChatPro.Login_Head)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string password = 3;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // sfixed32 data_size = 1;
  if (this->data_size() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Login_Head::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WeChatPro.Login_Head)
  GOOGLE_DCHECK_NE(&from, this);
  const Login_Head* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Login_Head>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WeChatPro.Login_Head)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WeChatPro.Login_Head)
    MergeFrom(*source);
  }
}

void Login_Head::MergeFrom(const Login_Head& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WeChatPro.Login_Head)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.data_size() != 0) {
    set_data_size(from.data_size());
  }
}

void Login_Head::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WeChatPro.Login_Head)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_Head::CopyFrom(const Login_Head& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WeChatPro.Login_Head)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_Head::IsInitialized() const {
  return true;
}

void Login_Head::Swap(Login_Head* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Login_Head::InternalSwap(Login_Head* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_size_, other->data_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Login_Head::GetMetadata() const {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Reply_Login::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reply_Login::kDataSizeFieldNumber;
const int Reply_Login::kResFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reply_Login::Reply_Login()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_test_2eproto::scc_info_Reply_Login.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:WeChatPro.Reply_Login)
}
Reply_Login::Reply_Login(const Reply_Login& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&data_size_, &from.data_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&res_) -
    reinterpret_cast<char*>(&data_size_)) + sizeof(res_));
  // @@protoc_insertion_point(copy_constructor:WeChatPro.Reply_Login)
}

void Reply_Login::SharedCtor() {
  ::memset(&data_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_) -
      reinterpret_cast<char*>(&data_size_)) + sizeof(res_));
}

Reply_Login::~Reply_Login() {
  // @@protoc_insertion_point(destructor:WeChatPro.Reply_Login)
  SharedDtor();
}

void Reply_Login::SharedDtor() {
}

void Reply_Login::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Reply_Login::descriptor() {
  ::protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Reply_Login& Reply_Login::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_test_2eproto::scc_info_Reply_Login.base);
  return *internal_default_instance();
}


void Reply_Login::Clear() {
// @@protoc_insertion_point(message_clear_start:WeChatPro.Reply_Login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&data_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_) -
      reinterpret_cast<char*>(&data_size_)) + sizeof(res_));
  _internal_metadata_.Clear();
}

bool Reply_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WeChatPro.Reply_Login)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed32 data_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &data_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool res = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &res_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WeChatPro.Reply_Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WeChatPro.Reply_Login)
  return false;
#undef DO_
}

void Reply_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WeChatPro.Reply_Login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 data_size = 1;
  if (this->data_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->data_size(), output);
  }

  // bool res = 2;
  if (this->res() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->res(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:WeChatPro.Reply_Login)
}

::google::protobuf::uint8* Reply_Login::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WeChatPro.Reply_Login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 data_size = 1;
  if (this->data_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->data_size(), target);
  }

  // bool res = 2;
  if (this->res() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->res(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WeChatPro.Reply_Login)
  return target;
}

size_t Reply_Login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WeChatPro.Reply_Login)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // sfixed32 data_size = 1;
  if (this->data_size() != 0) {
    total_size += 1 + 4;
  }

  // bool res = 2;
  if (this->res() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Reply_Login::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WeChatPro.Reply_Login)
  GOOGLE_DCHECK_NE(&from, this);
  const Reply_Login* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Reply_Login>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WeChatPro.Reply_Login)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WeChatPro.Reply_Login)
    MergeFrom(*source);
  }
}

void Reply_Login::MergeFrom(const Reply_Login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WeChatPro.Reply_Login)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data_size() != 0) {
    set_data_size(from.data_size());
  }
  if (from.res() != 0) {
    set_res(from.res());
  }
}

void Reply_Login::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WeChatPro.Reply_Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply_Login::CopyFrom(const Reply_Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WeChatPro.Reply_Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply_Login::IsInitialized() const {
  return true;
}

void Reply_Login::Swap(Reply_Login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Reply_Login::InternalSwap(Reply_Login* other) {
  using std::swap;
  swap(data_size_, other->data_size_);
  swap(res_, other->res_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Reply_Login::GetMetadata() const {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace WeChatPro
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::WeChatPro::Login_Head* Arena::CreateMaybeMessage< ::WeChatPro::Login_Head >(Arena* arena) {
  return Arena::CreateInternal< ::WeChatPro::Login_Head >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::WeChatPro::Reply_Login* Arena::CreateMaybeMessage< ::WeChatPro::Reply_Login >(Arena* arena) {
  return Arena::CreateInternal< ::WeChatPro::Reply_Login >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

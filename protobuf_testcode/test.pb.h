// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_INCLUDED_test_2eproto
#define PROTOBUF_INCLUDED_test_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_test_2eproto 

namespace protobuf_test_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_test_2eproto
namespace WeChatPro {
class Login_Head;
class Login_HeadDefaultTypeInternal;
extern Login_HeadDefaultTypeInternal _Login_Head_default_instance_;
class Reply_Login;
class Reply_LoginDefaultTypeInternal;
extern Reply_LoginDefaultTypeInternal _Reply_Login_default_instance_;
}  // namespace WeChatPro
namespace google {
namespace protobuf {
template<> ::WeChatPro::Login_Head* Arena::CreateMaybeMessage<::WeChatPro::Login_Head>(Arena*);
template<> ::WeChatPro::Reply_Login* Arena::CreateMaybeMessage<::WeChatPro::Reply_Login>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace WeChatPro {

// ===================================================================

class Login_Head : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WeChatPro.Login_Head) */ {
 public:
  Login_Head();
  virtual ~Login_Head();

  Login_Head(const Login_Head& from);

  inline Login_Head& operator=(const Login_Head& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Login_Head(Login_Head&& from) noexcept
    : Login_Head() {
    *this = ::std::move(from);
  }

  inline Login_Head& operator=(Login_Head&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_Head& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Login_Head* internal_default_instance() {
    return reinterpret_cast<const Login_Head*>(
               &_Login_Head_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Login_Head* other);
  friend void swap(Login_Head& a, Login_Head& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Login_Head* New() const final {
    return CreateMaybeMessage<Login_Head>(NULL);
  }

  Login_Head* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Login_Head>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Login_Head& from);
  void MergeFrom(const Login_Head& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login_Head* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 2;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string password = 3;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // sfixed32 data_size = 1;
  void clear_data_size();
  static const int kDataSizeFieldNumber = 1;
  ::google::protobuf::int32 data_size() const;
  void set_data_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:WeChatPro.Login_Head)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::int32 data_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Reply_Login : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WeChatPro.Reply_Login) */ {
 public:
  Reply_Login();
  virtual ~Reply_Login();

  Reply_Login(const Reply_Login& from);

  inline Reply_Login& operator=(const Reply_Login& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Reply_Login(Reply_Login&& from) noexcept
    : Reply_Login() {
    *this = ::std::move(from);
  }

  inline Reply_Login& operator=(Reply_Login&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply_Login& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reply_Login* internal_default_instance() {
    return reinterpret_cast<const Reply_Login*>(
               &_Reply_Login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Reply_Login* other);
  friend void swap(Reply_Login& a, Reply_Login& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Reply_Login* New() const final {
    return CreateMaybeMessage<Reply_Login>(NULL);
  }

  Reply_Login* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Reply_Login>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Reply_Login& from);
  void MergeFrom(const Reply_Login& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reply_Login* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // sfixed32 data_size = 1;
  void clear_data_size();
  static const int kDataSizeFieldNumber = 1;
  ::google::protobuf::int32 data_size() const;
  void set_data_size(::google::protobuf::int32 value);

  // bool res = 2;
  void clear_res();
  static const int kResFieldNumber = 2;
  bool res() const;
  void set_res(bool value);

  // @@protoc_insertion_point(class_scope:WeChatPro.Reply_Login)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 data_size_;
  bool res_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Login_Head

// sfixed32 data_size = 1;
inline void Login_Head::clear_data_size() {
  data_size_ = 0;
}
inline ::google::protobuf::int32 Login_Head::data_size() const {
  // @@protoc_insertion_point(field_get:WeChatPro.Login_Head.data_size)
  return data_size_;
}
inline void Login_Head::set_data_size(::google::protobuf::int32 value) {
  
  data_size_ = value;
  // @@protoc_insertion_point(field_set:WeChatPro.Login_Head.data_size)
}

// string username = 2;
inline void Login_Head::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Login_Head::username() const {
  // @@protoc_insertion_point(field_get:WeChatPro.Login_Head.username)
  return username_.GetNoArena();
}
inline void Login_Head::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WeChatPro.Login_Head.username)
}
#if LANG_CXX11
inline void Login_Head::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WeChatPro.Login_Head.username)
}
#endif
inline void Login_Head::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WeChatPro.Login_Head.username)
}
inline void Login_Head::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WeChatPro.Login_Head.username)
}
inline ::std::string* Login_Head::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:WeChatPro.Login_Head.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Login_Head::release_username() {
  // @@protoc_insertion_point(field_release:WeChatPro.Login_Head.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login_Head::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:WeChatPro.Login_Head.username)
}

// string password = 3;
inline void Login_Head::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Login_Head::password() const {
  // @@protoc_insertion_point(field_get:WeChatPro.Login_Head.password)
  return password_.GetNoArena();
}
inline void Login_Head::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WeChatPro.Login_Head.password)
}
#if LANG_CXX11
inline void Login_Head::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WeChatPro.Login_Head.password)
}
#endif
inline void Login_Head::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WeChatPro.Login_Head.password)
}
inline void Login_Head::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WeChatPro.Login_Head.password)
}
inline ::std::string* Login_Head::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:WeChatPro.Login_Head.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Login_Head::release_password() {
  // @@protoc_insertion_point(field_release:WeChatPro.Login_Head.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login_Head::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:WeChatPro.Login_Head.password)
}

// -------------------------------------------------------------------

// Reply_Login

// sfixed32 data_size = 1;
inline void Reply_Login::clear_data_size() {
  data_size_ = 0;
}
inline ::google::protobuf::int32 Reply_Login::data_size() const {
  // @@protoc_insertion_point(field_get:WeChatPro.Reply_Login.data_size)
  return data_size_;
}
inline void Reply_Login::set_data_size(::google::protobuf::int32 value) {
  
  data_size_ = value;
  // @@protoc_insertion_point(field_set:WeChatPro.Reply_Login.data_size)
}

// bool res = 2;
inline void Reply_Login::clear_res() {
  res_ = false;
}
inline bool Reply_Login::res() const {
  // @@protoc_insertion_point(field_get:WeChatPro.Reply_Login.res)
  return res_;
}
inline void Reply_Login::set_res(bool value) {
  
  res_ = value;
  // @@protoc_insertion_point(field_set:WeChatPro.Reply_Login.res)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace WeChatPro

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_test_2eproto
